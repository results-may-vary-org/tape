name: Build and Publish

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: read

env:
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  get-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "tag=$tag" >> $GITHUB_OUTPUT

  build:
    needs: get-tag
    strategy:
      fail-fast: false
      matrix:
        build:
          - name: 'tape'
            platform: 'linux/amd64'
            platform_hyphen: 'linux-amd64'
            os: 'ubuntu-latest'
          - name: 'tape'
            platform: 'windows/amd64'
            platform_hyphen: 'windows-amd64'
            os: 'windows-latest'
          - name: 'tape'
            platform: 'darwin/universal'
            platform_hyphen: 'darwin-universal'
            os: 'macos-latest'

    runs-on: ${{ matrix.build.os }}
    env:
      TAPE_VERSION: ${{ needs.get-tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build wails
        uses: dAppServer/wails-build-action@main
        id: build
        with:
          build-cache: false
          build-name: ${{ matrix.build.platform == 'darwin/universal' && matrix.build.name || format('{0}-{1}-{2}', matrix.build.name, matrix.build.platform_hyphen, needs.get-tag.outputs.tag) }}
          build-platform: ${{ matrix.build.platform }}
          package: true
          nsis: ${{ matrix.build.platform == 'windows/amd64' }}
          go-version: '1.23'
          wails-version: 'v2.9.0'

      - name: Setup nFPM (Linux only)
        if: matrix.build.os == 'ubuntu-latest'
        run: |
          wget https://github.com/goreleaser/nfpm/releases/download/v2.40.0/nfpm_2.40.0_Linux_x86_64.tar.gz
          tar -xzf nfpm_2.40.0_Linux_x86_64.tar.gz
          sudo mv nfpm /usr/local/bin/
          nfpm --version

      - name: Create Linux packages (Linux only)
        if: matrix.build.os == 'ubuntu-latest'
        run: |
          # Verify binary exists and rename it
          ls -la build/bin/

          # Copy the versioned binary to the expected name
          cp build/bin/tape-linux-amd64-${{ needs.get-tag.outputs.tag }} build/bin/tape
          chmod +x build/bin/tape

          # Copy icon if it doesn't exist in the expected location
          if [ ! -f build/appicon.png ]; then
            echo "Warning: appicon.png not found in build/, creating placeholder"
            mkdir -p build
            # Create a simple placeholder icon file
            echo "PNG placeholder" > build/appicon.png
          fi

          # Generate packages
          TAPE_VERSION=${{ needs.get-tag.outputs.tag }} nfpm package --packager deb --target ./build/
          TAPE_VERSION=${{ needs.get-tag.outputs.tag }} nfpm package --packager rpm --target ./build/
          TAPE_VERSION=${{ needs.get-tag.outputs.tag }} nfpm package --packager apk --target ./build/

          # List generated packages
          ls -la build/*.{deb,rpm,apk} || echo "Some packages may not have been generated"

      - name: Upload Linux packages (Linux only)
        if: matrix.build.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages-${{ needs.get-tag.outputs.tag }}
          path: |
            build/*.deb
            build/*.rpm
            build/*.apk

      - name: Upload Linux packages to release (Linux only)
        if: matrix.build.os == 'ubuntu-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/*.deb
            build/*.rpm
            build/*.apk

  update-aur:
    needs: [get-tag, build]
    runs-on: ubuntu-latest
    container: archlinux:latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Update system and install dependencies
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm git base-devel wget

      - name: Checkout tape-bin repository
        uses: actions/checkout@v4
        with:
          repository: results-may-vary-org/tape-bin
          token: ${{ secrets.GITHUB_TOKEN }}
          path: tape-bin

      - name: Download and verify release
        run: |
          VERSION=${{ needs.get-tag.outputs.tag }}
          VERSION_NO_V=${VERSION#v}

          # Download the deb package
          wget "https://github.com/results-may-vary-org/tape/releases/download/${VERSION}/tape_${VERSION_NO_V}_amd64.deb"

          # Calculate checksum
          CHECKSUM=$(sha256sum "tape_${VERSION_NO_V}_amd64.deb" | cut -d' ' -f1)
          echo "VERSION_NO_V=${VERSION_NO_V}" >> $GITHUB_ENV
          echo "CHECKSUM=${CHECKSUM}" >> $GITHUB_ENV

      - name: Update PKGBUILD
        run: |
          cd tape-bin

          # Update version
          sed -i "s/^pkgver=.*/pkgver=${VERSION_NO_V}/" PKGBUILD

          # Update checksum
          sed -i "s/^sha256sums_x86_64=.*/sha256sums_x86_64=('${CHECKSUM}')/" PKGBUILD

          # Increment pkgrel if same version (shouldn't happen but safety measure)
          # This will be 1 for new versions
          sed -i "s/^pkgrel=.*/pkgrel=1/" PKGBUILD

      - name: Generate .SRCINFO
        run: |
          cd tape-bin
          makepkg --printsrcinfo > .SRCINFO

      - name: Commit and push changes
        run: |
          cd tape-bin

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          git add PKGBUILD .SRCINFO
          git commit -m "Update to version ${VERSION_NO_V}

          git push
