name: Build and Publish

on:
  workflow_dispatch:

env:
  NODE_OPTIONS: "--max-old-space-size=4096"
  TAPE_VERSION: ${{ github.ref_name }}

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        build:
          - name: 'tape'
            platform: 'linux/amd64'
            os: 'ubuntu-latest'
          - name: 'tape'
            platform: 'windows/amd64'
            os: 'windows-latest'
          - name: 'tape'
            platform: 'darwin/universal'
            os: 'macos-latest'

    runs-on: ${{ matrix.build.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            $tag = git describe --tags --abbrev=0 2>$null
            if (-not $tag) { $tag = "v0.0.0" }
            echo "TAPE_VERSION=$tag" >> $env:GITHUB_ENV
          else
            tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            echo "TAPE_VERSION=$tag" >> $GITHUB_ENV
          fi

      - name: Build wails
        uses: dAppServer/wails-build-action@main
        id: build
        with:
          build-name: ${{ matrix.build.name }}
          build-platform: ${{ matrix.build.platform }}
          package: false
          go-version: '1.23'

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build.name }}-${{ matrix.build.platform }}
          path: ${{ steps.build.outputs.binary-path }}
          if-no-files-found: error
          retention-days: 30
          compression-level: 0

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "TAPE_VERSION=$tag" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAPE_VERSION }}
          name: Release ${{ env.TAPE_VERSION }}
          draft: true
          prerelease: false
          files: ./artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
