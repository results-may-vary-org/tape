name: Build and Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual triggering

env:
  NODE_OPTIONS: "--max-old-space-size=4096"
  TAPE_VERSION: ${{ github.ref_type == 'tag' && github.ref_name || 'dev' }}

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 'tape-linux-amd64'
            platform: 'linux/amd64'
            os: 'ubuntu-latest'
            go-version: '1.21'
            node-version: '20'
          - name: 'tape-windows-amd64'
            platform: 'windows/amd64'
            os: 'windows-latest'
            go-version: '1.21'
            node-version: '20'
          - name: 'tape-darwin-universal'
            platform: 'darwin/universal'
            os: 'macos-latest'
            go-version: '1.21'
            node-version: '20'

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # Cache Go modules
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Cache Node.js modules
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: |
            frontend/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Cache Wails CLI
      - name: Cache Wails CLI
        uses: actions/cache@v4
        with:
          path: |
            ~/go/bin/wails
            ~/.local/bin/wails
          key: ${{ runner.os }}-wails-${{ hashFiles('.github/workflows/build.yml') }}
          restore-keys: |
            ${{ runner.os }}-wails-

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      # Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      # Build the application
      - name: Build application
        env:
          TAPE_VERSION: ${{ env.TAPE_VERSION }}
        run: |
          echo "Building with TAPE_VERSION: ${{ env.TAPE_VERSION }}"
          wails build --platform ${{ matrix.platform }} --clean

      # Rename and prepare artifacts (Linux/macOS)
      - name: Prepare artifacts (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd build/bin
          if [ "${{ matrix.platform }}" = "darwin/universal" ]; then
            # For macOS, we have an .app bundle
            tar -czf ${{ matrix.name }}.tar.gz tape.app
          else
            # For Linux, we have a binary
            tar -czf ${{ matrix.name }}.tar.gz tape
          fi

      # Rename and prepare artifacts (Windows)
      - name: Prepare artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd build/bin
          Compress-Archive -Path tape.exe -DestinationPath ${{ matrix.name }}.zip

      # Upload artifacts
      - name: Upload artifacts (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: build/bin/${{ matrix.name }}.tar.gz

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: build/bin/${{ matrix.name }}.zip

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/tape-linux-amd64/tape-linux-amd64.tar.gz
            artifacts/tape-windows-amd64/tape-windows-amd64.zip
            artifacts/tape-darwin-universal/tape-darwin-universal.tar.gz
          draft: true
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
